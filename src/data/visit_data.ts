import { getDatabase } from "./indexedDB";
import { UpgradeDB, ObjectStore } from "idb";

/**
 * The saved data for a visit.
 *
 * @export
 * @interface Visit
 */
export interface Visit {
    visitId?: number; // id set by db
    creation: {
        cause: CreationCause;
        parentId: number | null; // if navigation creation cause
        replacedParent: boolean | null;
        time: number;
    };
    end?: {
        cause: EndCause;
        time: number;
    };
    children: number[];
    page: {
        title: string;
        url: string;
        favIconUrl: string;
    };
}

/**
 * Why a visit was created.
 *
 * @export
 * @enum {number}
 */
export enum CreationCause {
    manual, // user opened new tab
    navigation, // user clicked on an link, or typed in address bar
    import
}

/**
 * Why a visit was ended.
 *
 * @export
 * @enum {number}
 */
export enum EndCause {
    manual, // user closed tab
    navigation // we navigated somewhere else
}

export function createVisitsStore(db: UpgradeDB): ObjectStore<number, Visit> {
    const store = db.createObjectStore("visits", {
        keyPath: "visitId",
        autoIncrement: true
    });
    return store;
}

/**
 * Save a visit to the database.
 * If the supplied visit has no visitId field, one will be generated by the database.
 *
 * @export
 * @param {Visit} visit The visit to save.
 * @returns {Promise<number>} A Promise that resolves with the id of the saved
 * visit, or an errormessage.
 */
export function saveVisit(visit: Visit): Promise<number> {
    return getDatabase().then(db => {
        const transaction = db.transaction(["visits"], "readwrite");
        const objectStore = transaction.objectStore("visits");

        return objectStore.put(visit) as Promise<number>;
    });
}

/**
 * Get a visit from the database.
 *
 * @export
 * @param {number} visitId The id of the visit
 * @returns {Promise<Visit>} A Promise that resolves with the visit or an errormessage.
 */
export function getVisit(visitId: number): Promise<Visit> {
    return getDatabase().then(db => {
        const transaction = db.transaction(["visits"], "readonly");
        const objectStore = transaction.objectStore("visits");

        return objectStore.get(visitId);
    });
}

/**
 * Update a visit record in the database.
 *
 * @export
 * @param {number} visitId The id of the visit to update.
 * @param {(currentVisit: Visit) => Visit} updateFunction The function to update
 * the visit record.
 * @returns {Promise<number>} A promise that resolves with the visitId when the
 * action was completed.
 */
export function updateVisit(
    visitId: number,
    updateFunction: (currentVisit: Visit) => Visit
): Promise<number> {
    return getVisit(visitId).then(oldVisit => {
        const newVisit = updateFunction(oldVisit);
        return saveVisit(newVisit);
    });
}

// export function updateVisit(
//     visitId: number,
//     updateFunction: (currentVisit: Visit) => Visit
// ): Promise<undefined> {
//     return new Promise((resolve, reject) => {
//         getDatabase().then(db => {
//             const transaction = db.transaction(["visits"], "readwrite");
//             const objectStore = transaction.objectStore("visits");

//             // get current state
//             const saveRequest = objectStore.get(visitId);
//             saveRequest.onerror = event => {
//                 reject("error getting data");
//             };
//             saveRequest.onsuccess = (event: any) => {
//                 const currentVisit = saveRequest.result;

//                 const newData = updateFunction(currentVisit);

//                 // put new data in db
//                 const requestUpdate = objectStore.put(newData);
//                 requestUpdate.onerror = function(event) {
//                     reject("error updating visit");
//                 };
//                 requestUpdate.onsuccess = function(event) {
//                     resolve();
//                 };
//             };
//         });
//     });
// }
